// Code generated by protoc-gen-go. DO NOT EDIT.
// source: article.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	article.proto

It has these top-level messages:
	Article
	ArticleId
	Articles
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Article struct {
	Id        int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Subtitle  string `protobuf:"bytes,3,opt,name=subtitle" json:"subtitle,omitempty"`
	Content   string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	StatusId  int32  `protobuf:"varint,5,opt,name=statusId" json:"statusId,omitempty"`
	ProfileId int32  `protobuf:"varint,6,opt,name=profileId" json:"profileId,omitempty"`
}

func (m *Article) Reset()                    { *m = Article{} }
func (m *Article) String() string            { return proto.CompactTextString(m) }
func (*Article) ProtoMessage()               {}
func (*Article) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Article) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Article) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Article) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

func (m *Article) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Article) GetStatusId() int32 {
	if m != nil {
		return m.StatusId
	}
	return 0
}

func (m *Article) GetProfileId() int32 {
	if m != nil {
		return m.ProfileId
	}
	return 0
}

type ArticleId struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ArticleId) Reset()                    { *m = ArticleId{} }
func (m *ArticleId) String() string            { return proto.CompactTextString(m) }
func (*ArticleId) ProtoMessage()               {}
func (*ArticleId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ArticleId) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Articles struct {
	Offset int32      `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Limit  int32      `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Page   int32      `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
	Count  int32      `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Data   []*Article `protobuf:"bytes,5,rep,name=data" json:"data,omitempty"`
}

func (m *Articles) Reset()                    { *m = Articles{} }
func (m *Articles) String() string            { return proto.CompactTextString(m) }
func (*Articles) ProtoMessage()               {}
func (*Articles) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Articles) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Articles) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Articles) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Articles) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Articles) GetData() []*Article {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Article)(nil), "grpc.Article")
	proto.RegisterType((*ArticleId)(nil), "grpc.ArticleId")
	proto.RegisterType((*Articles)(nil), "grpc.Articles")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for ArticleService service

type ArticleServiceClient interface {
	Create(ctx context.Context, in *Article, opts ...grpc1.CallOption) (*Article, error)
	Find(ctx context.Context, in *Article, opts ...grpc1.CallOption) (*Articles, error)
	FindById(ctx context.Context, in *ArticleId, opts ...grpc1.CallOption) (*Article, error)
	Update(ctx context.Context, in *ArticleId, opts ...grpc1.CallOption) (*Article, error)
	DeleteById(ctx context.Context, in *ArticleId, opts ...grpc1.CallOption) (*Article, error)
}

type articleServiceClient struct {
	cc *grpc1.ClientConn
}

func NewArticleServiceClient(cc *grpc1.ClientConn) ArticleServiceClient {
	return &articleServiceClient{cc}
}

func (c *articleServiceClient) Create(ctx context.Context, in *Article, opts ...grpc1.CallOption) (*Article, error) {
	out := new(Article)
	err := grpc1.Invoke(ctx, "/grpc.ArticleService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Find(ctx context.Context, in *Article, opts ...grpc1.CallOption) (*Articles, error) {
	out := new(Articles)
	err := grpc1.Invoke(ctx, "/grpc.ArticleService/Find", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) FindById(ctx context.Context, in *ArticleId, opts ...grpc1.CallOption) (*Article, error) {
	out := new(Article)
	err := grpc1.Invoke(ctx, "/grpc.ArticleService/FindById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Update(ctx context.Context, in *ArticleId, opts ...grpc1.CallOption) (*Article, error) {
	out := new(Article)
	err := grpc1.Invoke(ctx, "/grpc.ArticleService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) DeleteById(ctx context.Context, in *ArticleId, opts ...grpc1.CallOption) (*Article, error) {
	out := new(Article)
	err := grpc1.Invoke(ctx, "/grpc.ArticleService/DeleteById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ArticleService service

type ArticleServiceServer interface {
	Create(context.Context, *Article) (*Article, error)
	Find(context.Context, *Article) (*Articles, error)
	FindById(context.Context, *ArticleId) (*Article, error)
	Update(context.Context, *ArticleId) (*Article, error)
	DeleteById(context.Context, *ArticleId) (*Article, error)
}

func RegisterArticleServiceServer(s *grpc1.Server, srv ArticleServiceServer) {
	s.RegisterService(&_ArticleService_serviceDesc, srv)
}

func _ArticleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Create(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ArticleService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Create(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Find(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ArticleService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Find(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).FindById(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ArticleService/FindById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).FindById(ctx, req.(*ArticleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Update(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ArticleService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Update(ctx, req.(*ArticleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_DeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).DeleteById(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ArticleService/DeleteById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).DeleteById(ctx, req.(*ArticleId))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArticleService_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.ArticleService",
	HandlerType: (*ArticleServiceServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ArticleService_Create_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _ArticleService_Find_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _ArticleService_FindById_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ArticleService_Update_Handler,
		},
		{
			MethodName: "DeleteById",
			Handler:    _ArticleService_DeleteById_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "article.proto",
}

func init() { proto.RegisterFile("article.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4d, 0x6a, 0xe3, 0x40,
	0x10, 0x85, 0x91, 0x2c, 0xc9, 0x72, 0x0d, 0xb2, 0x87, 0x9a, 0x1f, 0x1a, 0x8f, 0x17, 0x1e, 0xad,
	0x8c, 0x17, 0x16, 0x78, 0x16, 0x03, 0x33, 0x2b, 0xdb, 0x21, 0xa0, 0xad, 0x42, 0x0e, 0xd0, 0x56,
	0xb7, 0x45, 0x83, 0xa2, 0x16, 0x52, 0x3b, 0x10, 0x42, 0x36, 0x81, 0x9c, 0x20, 0x07, 0xc8, 0x9d,
	0x92, 0x2b, 0xe4, 0x20, 0x41, 0xad, 0xb6, 0x83, 0xbc, 0x09, 0xd9, 0xe9, 0xd5, 0xab, 0xaf, 0xea,
	0x95, 0x24, 0x08, 0x68, 0xa5, 0x44, 0x9a, 0xf3, 0x45, 0x59, 0x49, 0x25, 0xd1, 0xc9, 0xaa, 0x32,
	0x1d, 0x4f, 0x32, 0x29, 0xb3, 0x9c, 0x47, 0xb4, 0x14, 0x11, 0x2d, 0x0a, 0xa9, 0xa8, 0x12, 0xb2,
	0xa8, 0xdb, 0x9e, 0xf0, 0xc9, 0x82, 0xfe, 0xaa, 0xa5, 0x70, 0x08, 0xb6, 0x60, 0xc4, 0x9a, 0x5a,
	0x33, 0x37, 0xb1, 0x05, 0xc3, 0xef, 0xe0, 0x2a, 0xa1, 0x72, 0x4e, 0xec, 0xa9, 0x35, 0x1b, 0x24,
	0xad, 0xc0, 0x31, 0xf8, 0xf5, 0x7e, 0xdb, 0x1a, 0x3d, 0x6d, 0x1c, 0x35, 0x12, 0xe8, 0xa7, 0xb2,
	0x50, 0xbc, 0x50, 0xc4, 0xd1, 0xd6, 0x41, 0x6a, 0x4a, 0x51, 0xb5, 0xaf, 0x63, 0x46, 0x5c, 0xbd,
	0xe1, 0xa8, 0x71, 0x02, 0x83, 0xb2, 0x92, 0x3b, 0x91, 0xf3, 0x98, 0x11, 0x4f, 0x9b, 0xef, 0x85,
	0xf0, 0x17, 0x0c, 0x4c, 0xc0, 0x98, 0x9d, 0x46, 0x0c, 0x1f, 0x2c, 0xf0, 0x8d, 0x5b, 0xe3, 0x4f,
	0xf0, 0xe4, 0x6e, 0x57, 0x73, 0x65, 0x1a, 0x8c, 0x6a, 0xee, 0xc8, 0xc5, 0x95, 0x50, 0xfa, 0x0e,
	0x37, 0x69, 0x05, 0x22, 0x38, 0x25, 0xcd, 0xda, 0x1b, 0xdc, 0x44, 0x3f, 0x37, 0x9d, 0xa9, 0xdc,
	0x9b, 0xf4, 0x6e, 0xd2, 0x0a, 0xfc, 0x0d, 0x0e, 0xa3, 0x8a, 0x12, 0x77, 0xda, 0x9b, 0x7d, 0x59,
	0x06, 0x8b, 0xe6, 0xb5, 0x2e, 0xcc, 0xd6, 0x44, 0x5b, 0xcb, 0x67, 0x1b, 0x86, 0xa6, 0x72, 0xc1,
	0xab, 0x6b, 0x91, 0x72, 0xfc, 0x0f, 0xde, 0xa6, 0xe2, 0x54, 0x71, 0xec, 0x12, 0xe3, 0xae, 0x0c,
	0xbf, 0xdd, 0xbf, 0xbc, 0x3e, 0xda, 0x41, 0xe8, 0x47, 0xe6, 0xeb, 0xfd, 0xb3, 0xe6, 0xf8, 0x17,
	0x9c, 0x73, 0x51, 0xb0, 0x53, 0x74, 0xd8, 0x91, 0x75, 0xf8, 0x55, 0xb3, 0x80, 0x47, 0x16, 0x57,
	0xe0, 0x37, 0xe0, 0xfa, 0x26, 0x66, 0x38, 0xea, 0x74, 0xc7, 0xec, 0x74, 0xf3, 0x0f, 0x4d, 0x8f,
	0x30, 0x38, 0xd0, 0xd1, 0xad, 0x60, 0x77, 0xb8, 0x06, 0xef, 0xb2, 0x64, 0x4d, 0xf0, 0x8f, 0x06,
	0x10, 0x3d, 0x00, 0x97, 0xdd, 0x01, 0x4d, 0xfe, 0x0d, 0xc0, 0x19, 0xcf, 0xb9, 0xe2, 0x9f, 0x09,
	0x32, 0xef, 0xce, 0xd9, 0x7a, 0xfa, 0x17, 0xfd, 0xf3, 0x16, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xf8,
	0x00, 0xff, 0xd7, 0x02, 0x00, 0x00,
}
